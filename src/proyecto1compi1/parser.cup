package proyecto1compi1;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Collections;
import java_cup.runtime.*;
import java_cup.sym;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.ArrayList;

class Parser;

terminal IG, UKN, STR, STAPR, ENDPR, DP, PYC, END, ASIG, PA, PC, COMA, ARROBA, CA, CC, POINTER, CHAR, VAR, ARR, SUM, RES, DIV;
terminal MULTI, MOD, MEDIA, MEDIANA,MODA, VARIANZA, MIN, MAX, CONSOLE, PRINT, EXEC, EJEX, EJEY, LABEL, COLUMN, VALUES, TITULO;
terminal TITULOX, TITULOY, GRAPHPIE, GRAPHBAR, GRAPHLINE, HISTOGRAM, DOUBLE, ID, DOUBLENUM;

non terminal L, CODIGOS, DECLARACION, CODIGO, TIPO, EXP, EXPS, IMPRIMIR, LISTA, OPERACION, OPERANDO;
non terminal ARREGLO, ESTADISTICAS, FUNCION;

start with L;

L ::= STAPR CODIGOS ENDPR;

CODIGOS ::=  CODIGOS CODIGO
    | CODIGO;

CODIGO ::= DECLARACION
    |IMPRIMIR;

ESTADISTICAS ::= FUNCION:nombre PA  ARREGLO:arreglo PC {: double resultado = 0; String resultado1 = ""; double maximo = 0; double minimo = 0;
        List<Double> numbers = Arrays.stream(arreglo.toString().split("\\s*,\\s*"))
                                     .map(Double::parseDouble)
                                     .collect(Collectors.toList());
        switch (nombre.toString()) {
            case "media":
                for (Double numero : numbers) {
                resultado += numero;
                }
                resultado = resultado / numbers.size();
                RESULT = String.valueOf(resultado);
                break;
            case "mediana":
                Collections.sort(numbers);
                int n = numbers.size();
                if (n % 2 == 0) {
                    resultado = (numbers.get(n / 2 - 1) + numbers.get(n / 2)) / 2.0;
                } else {
                    resultado = numbers.get(n / 2);
                }
                RESULT = String.valueOf(resultado);
                break;
            case "moda":
                Map<Double, Integer> frecuencias = new HashMap<>();
                for (Double numero : numbers) {
                    frecuencias.put(numero, frecuencias.getOrDefault(numero, 0) + 1);
                }

                int maxFrecuencia = Collections.max(frecuencias.values());
                List<Double> modas = new ArrayList<>();
                for (Map.Entry<Double, Integer> entry : frecuencias.entrySet()) {
                    if (entry.getValue() == maxFrecuencia) {
                        modas.add(entry.getKey());
                    }
                }
                for (Double numero : modas) {
                    resultado1 += numero.toString() + ", ";
                }
                RESULT = resultado1; 
                break;
            case "varianza":
                double suma = 0;
                for (Double numero : numbers) {
                    suma += numero;
                }
                double media = suma / numbers.size();

                double sumaCuadradosDiferencias = 0;
                for (Double numero : numbers) {
                    sumaCuadradosDiferencias += Math.pow(numero - media, 2);
                }

                double varianza = sumaCuadradosDiferencias / numbers.size();

                RESULT = varianza;
                break;
            case "min":
                for (Double numero : numbers) {
                    if (numero < minimo) {
                        minimo = numero;
                    }
                }
                RESULT = minimo;
                break;
            case "max":
                for (Double numero : numbers) {
                    if (numero > maximo) {
                        maximo = numero;
                    }
                }
                RESULT = maximo;
                break;
        }:};

FUNCION ::= MEDIA {: RESULT = "media"; :}
    |MEDIANA {: RESULT = "mediana"; :}
    |MODA {: RESULT = "moda"; :}
    |VARIANZA {: RESULT = "varianza"; :}
    |MIN {: RESULT = "min"; :}
    |MAX {: RESULT = "max"; :};

OPERACION ::= OPERANDO:oper PA EXP:op1 COMA EXP:op2 PC {:    double resultado = 0;
    switch (oper.toString()) {
        case "+":
            resultado = Double.parseDouble(op1.toString()) + Double.parseDouble(op2.toString());
            break;
        case "-":
            resultado = Double.parseDouble(op1.toString()) - Double.parseDouble(op2.toString());
            break;
        case "/":
            resultado = Double.parseDouble(op1.toString()) / Double.parseDouble(op2.toString());
            break;
        case "*":
            resultado = Double.parseDouble(op1.toString()) * Double.parseDouble(op2.toString());
            break;
        case "%":
            resultado = Double.parseDouble(op1.toString()) % Double.parseDouble(op2.toString());
            break;
    }
    RESULT = resultado; :};

OPERANDO ::= SUM:str {: RESULT = "+"; :}
    |RES:str {: RESULT = "-"; :}
    |DIV:str {: RESULT = "/"; :}
    |MULTI:str {: RESULT = "*"; :}
    |MOD:str {: RESULT = "%"; :};

IMPRIMIR ::= CONSOLE DP DP PRINT IG EXPS:var END PYC {: Main.jTextArea3.append(var.toString().replace("\"", "") + "\n"); :}
    |CONSOLE DP DP COLUMN IG EXP:titulo POINTER ARREGLO:arreglo END PYC {: Main.jTextArea3.append("--------------------\n" + titulo.toString().replace("\"", "") + "\n--------------------\n" + arreglo.toString().replace("\"", "").replace(",", "\n") + "\n"); :};

ARREGLO ::= LISTA:str {: RESULT = str; :}
    | ARROBA ID:id {: RESULT = Main.miObjeto.obtenerDelMapa(id.toString().toLowerCase()); :};

DECLARACION ::= VAR DP TIPO DP DP ID:name ASIG  EXP:val END PYC {: Main.miObjeto.agregarAlMapa(name.toString().toLowerCase(), val.toString()); :}
    | ARR DP TIPO DP DP ARROBA ID:name ASIG  LISTA:val END PYC {: Main.miObjeto.agregarAlMapa(name.toString().toLowerCase(), val.toString()); :};

LISTA ::= CA EXPS:str CC {: RESULT = str; :};

TIPO ::= DOUBLE:str {: RESULT = str; :}
    | CHAR:str {: RESULT = str; :}
    | OPERACION:ope {: RESULT = ope; :}; 

EXPS ::= EXPS:expresiones COMA EXP:exp {: RESULT = expresiones + ", " + exp;  :}
    | EXP:exp {: RESULT = exp; :};

EXP ::= ID:id {: RESULT = Main.miObjeto.obtenerDelMapa(id.toString().toLowerCase()); :}
    | STR:str {: RESULT = str; :}
    | DOUBLENUM:num {: RESULT = num; :}
    | OPERACION:ope {: RESULT = ope; :}
    | ESTADISTICAS:esta {: RESULT = esta; :};