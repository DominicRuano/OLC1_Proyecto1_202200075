/* The following code was generated by JFlex 1.7.0 */

package proyecto1compi1;

import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Dominic/Documents/NetBeansProjects/Proyecto1Compi1/src/proyecto1compi1/Lexer.jflex</tt>
 */
public class lexEx1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\1\30\1\31\1\21\22\0\1\16\1\17\1\26"+
    "\5\0\1\36\1\37\1\24\1\0\1\40\1\32\1\4\1\23\12\2"+
    "\1\34\1\35\1\22\1\33\1\25\1\0\1\41\1\11\1\50\1\44"+
    "\1\15\1\13\1\3\1\10\1\45\1\55\1\61\1\3\1\51\1\12"+
    "\1\14\1\7\1\5\1\3\1\6\1\53\1\60\1\47\1\46\1\3"+
    "\1\57\1\62\1\56\1\42\1\27\1\43\3\0\1\11\1\50\1\44"+
    "\1\15\1\13\1\3\1\10\1\45\1\55\1\61\1\3\1\51\1\12"+
    "\1\14\1\7\1\5\1\3\1\6\1\53\1\60\1\47\1\46\1\3"+
    "\1\57\1\62\1\56\12\0\1\30\252\0\2\54\115\0\1\52\u1ea8\0"+
    "\1\30\1\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\2\10\3\1\4\1\5\3\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\4\3\1\2\2\3\2\0\10\3\1\0\5\3"+
    "\1\0\1\3\1\0\1\17\1\0\1\20\1\0\1\21"+
    "\2\3\1\0\3\3\1\0\1\3\1\0\1\3\1\22"+
    "\1\3\1\0\1\3\2\23\1\3\1\24\1\25\1\26"+
    "\1\3\1\27\2\30\1\31\3\3\2\32\2\0\3\3"+
    "\1\0\1\3\1\33\2\3\2\34\1\0\2\3\1\0"+
    "\2\3\1\35\1\0\1\3\1\0\1\36\1\37\1\40"+
    "\1\3\2\0\1\41\1\0\3\3\1\0\1\3\1\0"+
    "\3\3\1\0\2\3\2\42\1\3\2\43\1\0\1\3"+
    "\2\0\2\3\2\0\1\3\1\0\2\3\1\44\1\0"+
    "\5\3\1\0\1\3\1\0\1\45\1\0\1\3\1\46"+
    "\1\47\1\0\1\3\1\0\1\3\2\50\2\51\1\52"+
    "\1\0\2\3\1\0\1\3\2\53\1\0\2\54\1\0"+
    "\1\3\1\0\1\3\1\55\1\56\1\55\1\56\2\57"+
    "\1\60\1\0\1\3\2\0\1\3\2\61\2\62\1\0"+
    "\2\63\1\0\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\63\0\u0297\0\u02ca"+
    "\0\u02fd\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\231\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\63\0\u02ca\0\63\0\u082b"+
    "\0\63\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0495\0\u0a5c\0\u0a8f\0\u0ac2\0\63"+
    "\0\314\0\u0af5\0\314\0\u0b28\0\314\0\u0b5b\0\314\0\63"+
    "\0\314\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\63\0\314\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\63\0\314\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\314\0\u0f8a\0\u0fbd\0\u0ff0\0\314\0\314\0\314"+
    "\0\u1023\0\u1056\0\u1089\0\u1056\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\63\0\314\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\314\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\314\0\u181b\0\u184e\0\314"+
    "\0\63\0\u1881\0\u18b4\0\u18e7\0\u191a\0\63\0\314\0\u194d"+
    "\0\u1980\0\314\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\63"+
    "\0\314\0\u1ab2\0\63\0\314\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\63\0\63\0\314\0\314\0\63\0\314\0\314\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\63\0\314\0\63\0\314"+
    "\0\u1cb0\0\63\0\314\0\u1ce3\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\5"+
    "\1\10\1\11\1\12\1\13\1\5\1\14\1\3\1\15"+
    "\1\16\1\3\1\17\3\2\1\20\1\2\1\0\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\5\1\36\1\37"+
    "\1\40\1\2\3\5\1\41\2\5\64\0\1\3\14\0"+
    "\1\3\2\0\1\3\7\0\1\3\33\0\1\42\1\0"+
    "\1\43\60\0\2\5\1\0\11\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\2\0\2\5\1\0\1\5\1\44"+
    "\7\5\26\0\6\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\6\5\1\45\2\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\2\0\2\5\1\0\1\5\1\46"+
    "\7\5\26\0\6\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\1\5\1\47\7\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\2\0\2\5\1\0\2\5\1\50"+
    "\1\5\1\51\1\5\1\52\2\5\26\0\3\5\1\53"+
    "\2\5\1\0\1\5\1\54\1\55\5\5\2\0\2\5"+
    "\1\0\7\5\1\56\1\5\26\0\6\5\1\0\1\5"+
    "\1\0\2\5\1\57\1\5\1\60\1\5\2\0\2\5"+
    "\1\0\2\5\1\61\6\5\26\0\6\5\1\0\1\5"+
    "\1\62\1\63\5\5\20\15\2\0\41\15\17\0\1\64"+
    "\12\0\1\65\30\0\26\66\1\67\1\70\33\66\25\0"+
    "\1\71\37\0\2\5\1\0\2\5\1\72\6\5\26\0"+
    "\1\5\1\73\4\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\11\5\26\0\6\5\1\0\1\5\1\74"+
    "\1\75\5\5\2\0\2\5\1\0\4\5\1\76\4\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\2\0\2\5"+
    "\1\0\4\5\1\77\4\5\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\47\0\1\100\15\0\2\5\1\0\11\5"+
    "\26\0\3\5\1\101\2\5\1\0\1\5\1\0\6\5"+
    "\2\0\2\5\1\0\11\5\26\0\6\5\1\0\1\5"+
    "\1\102\1\103\5\5\2\0\1\104\62\0\2\5\1\0"+
    "\2\5\1\105\6\5\26\0\6\5\1\0\1\5\1\106"+
    "\1\107\5\5\2\0\2\5\1\0\11\5\26\0\6\5"+
    "\1\110\1\111\1\0\6\5\2\0\2\5\1\0\4\5"+
    "\1\112\4\5\26\0\6\5\1\0\1\5\1\0\6\5"+
    "\2\0\2\5\1\0\1\5\1\113\7\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\2\0\2\5\1\0\10\5"+
    "\1\114\26\0\6\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\11\5\26\0\6\5\1\0\1\5\1\0"+
    "\2\5\1\115\3\5\2\0\2\5\1\0\10\5\1\116"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\2\0\2\5"+
    "\1\0\11\5\26\0\5\5\1\117\1\0\1\5\1\0"+
    "\6\5\14\0\1\120\50\0\2\5\1\0\7\5\1\121"+
    "\1\5\26\0\6\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\10\5\1\122\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\6\5\1\123\2\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\2\0\2\5"+
    "\1\0\6\5\1\124\2\5\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\11\5\26\0\3\5"+
    "\1\125\2\5\1\0\1\5\1\0\6\5\46\0\1\126"+
    "\16\0\2\5\1\0\11\5\26\0\2\5\1\127\3\5"+
    "\1\0\1\5\1\0\6\5\17\64\1\130\43\64\27\0"+
    "\1\131\35\0\2\5\1\0\7\5\1\132\1\5\26\0"+
    "\5\5\1\133\1\0\1\5\1\0\6\5\2\0\2\5"+
    "\1\0\4\5\1\134\4\5\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\52\0\2\135\11\0\2\5\1\0\11\5"+
    "\26\0\6\5\1\135\1\136\1\0\6\5\2\0\2\5"+
    "\1\0\1\5\1\137\7\5\26\0\5\5\1\140\1\0"+
    "\1\5\1\0\6\5\2\0\2\5\1\0\11\5\26\0"+
    "\4\5\1\141\1\5\1\0\1\5\1\0\6\5\12\0"+
    "\1\142\52\0\2\5\1\0\5\5\1\143\3\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\60\0\1\144\4\0"+
    "\2\5\1\0\11\5\26\0\6\5\1\0\1\5\1\0"+
    "\3\5\1\145\2\5\2\0\2\5\1\0\3\5\1\146"+
    "\5\5\26\0\6\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\147\50\0\2\5\1\0\7\5\1\150\1\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\1\151\10\5\26\0\6\5\1\0\1\5\1\0\6\5"+
    "\2\0\2\5\1\0\4\5\1\152\4\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\2\0\2\5\1\0\11\5"+
    "\26\0\6\5\1\0\1\5\1\153\1\154\5\5\2\0"+
    "\2\5\1\0\11\5\1\155\25\0\6\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\11\5\26\0\1\156"+
    "\5\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\11\5\26\0\6\5\1\0\1\5\1\0\2\5\1\157"+
    "\2\5\1\160\2\0\2\5\1\0\11\5\26\0\4\5"+
    "\1\161\1\5\1\0\1\5\1\0\6\5\17\162\1\163"+
    "\3\162\2\0\1\164\35\162\20\66\2\0\6\66\2\0"+
    "\31\66\2\0\2\5\1\0\11\5\26\0\6\5\1\165"+
    "\1\166\1\0\6\5\2\0\2\5\1\0\11\5\26\0"+
    "\3\5\1\167\2\5\1\0\1\5\1\0\6\5\2\0"+
    "\2\5\1\0\1\5\1\170\7\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\60\0\1\171\4\0\2\5\1\0"+
    "\11\5\26\0\6\5\1\0\1\5\1\0\3\5\1\172"+
    "\2\5\2\0\2\5\1\0\11\5\26\0\6\5\1\0"+
    "\1\5\1\173\1\174\5\5\2\0\2\5\1\0\11\5"+
    "\26\0\3\5\1\175\2\5\1\0\1\5\1\0\6\5"+
    "\2\0\2\5\1\0\6\5\1\176\2\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\47\0\1\177\15\0\2\5"+
    "\1\0\11\5\26\0\3\5\1\200\2\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\1\5\1\201\7\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\60\0\1\202"+
    "\4\0\2\5\1\0\11\5\26\0\6\5\1\0\1\5"+
    "\1\0\3\5\1\203\2\5\2\0\2\5\1\0\11\5"+
    "\26\0\1\5\1\204\4\5\1\0\1\5\1\0\6\5"+
    "\11\0\1\205\53\0\2\5\1\0\4\5\1\206\4\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\5\0\1\207"+
    "\57\0\2\5\1\0\11\5\26\0\5\5\1\210\1\0"+
    "\1\5\1\0\6\5\24\162\1\211\55\162\1\163\4\162"+
    "\1\211\1\164\35\162\7\0\1\212\55\0\2\5\1\0"+
    "\2\5\1\213\6\5\26\0\6\5\1\0\1\5\1\0"+
    "\6\5\2\0\2\5\1\0\5\5\1\214\3\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\11\5\24\0\1\215\1\0\6\5\1\0\1\5\1\0"+
    "\6\5\7\0\1\216\55\0\2\5\1\0\2\5\1\217"+
    "\6\5\26\0\6\5\1\0\1\5\1\0\6\5\11\0"+
    "\1\220\53\0\2\5\1\0\4\5\1\221\4\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\6\5\1\222\2\5\26\0\6\5\1\0\1\5\1\0"+
    "\6\5\2\0\2\5\1\0\11\5\26\0\5\5\1\223"+
    "\1\0\1\5\1\0\6\5\51\0\1\224\13\0\2\5"+
    "\1\0\11\5\26\0\5\5\1\225\1\0\1\5\1\0"+
    "\6\5\2\0\2\5\1\0\4\5\1\226\4\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\1\227\10\5\26\0\4\5\1\230\1\231\1\0\1\5"+
    "\1\0\6\5\14\0\1\232\50\0\2\5\1\0\7\5"+
    "\1\233\1\5\26\0\6\5\1\0\1\5\1\0\6\5"+
    "\6\0\1\234\56\0\2\5\1\0\6\5\1\235\2\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\23\162\1\0"+
    "\1\211\1\164\35\162\51\0\1\236\13\0\2\5\1\0"+
    "\11\5\26\0\5\5\1\237\1\0\1\5\1\0\6\5"+
    "\2\0\2\5\1\0\7\5\1\240\1\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\43\0\1\241\27\0\1\242"+
    "\54\0\2\5\1\0\3\5\1\243\5\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\244\50\0\2\5"+
    "\1\0\7\5\1\245\1\5\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\11\5\26\0\6\5"+
    "\1\246\1\247\1\0\6\5\7\0\1\250\55\0\2\5"+
    "\1\0\2\5\1\251\6\5\26\0\6\5\1\0\1\5"+
    "\1\0\6\5\2\0\2\5\1\0\5\5\1\252\3\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\2\0\2\5"+
    "\1\0\11\5\26\0\6\5\1\0\1\5\1\253\1\254"+
    "\5\5\2\0\2\5\1\0\4\5\1\255\4\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\2\0\2\5\1\0"+
    "\11\5\26\0\6\5\1\0\1\5\1\256\1\257\5\5"+
    "\11\0\1\260\53\0\2\5\1\0\4\5\1\261\4\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\7\0\1\262"+
    "\66\0\1\263\51\0\2\5\1\0\6\5\1\264\2\5"+
    "\26\0\6\5\1\0\1\5\1\0\6\5\6\0\1\265"+
    "\56\0\2\5\1\0\1\5\1\266\7\5\26\0\6\5"+
    "\1\0\1\5\1\0\6\5\56\0\1\267\6\0\2\5"+
    "\1\0\11\5\26\0\6\5\1\0\1\5\1\0\1\5"+
    "\1\270\4\5\57\0\1\271\2\0\1\272\2\0\2\5"+
    "\1\0\11\5\26\0\6\5\1\0\1\5\1\0\2\5"+
    "\1\273\2\5\1\274\13\0\1\275\51\0\2\5\1\0"+
    "\6\5\1\276\2\5\26\0\6\5\1\0\1\5\1\0"+
    "\6\5\2\0\2\5\1\0\1\5\1\277\7\5\26\0"+
    "\6\5\1\0\1\5\1\0\6\5\14\0\1\300\50\0"+
    "\2\5\1\0\7\5\1\301\1\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\10\0\1\302\63\0\1\303\53\0"+
    "\2\5\1\0\4\5\1\304\4\5\26\0\6\5\1\0"+
    "\1\5\1\0\6\5\11\0\1\305\53\0\2\5\1\0"+
    "\4\5\1\306\4\5\26\0\6\5\1\0\1\5\1\0"+
    "\6\5\13\0\1\307\51\0\2\5\1\0\6\5\1\310"+
    "\2\5\26\0\6\5\1\0\1\5\1\0\6\5\6\0"+
    "\1\311\66\0\1\312\52\0\2\5\1\0\5\5\1\313"+
    "\3\5\26\0\6\5\1\0\1\5\1\0\6\5\11\0"+
    "\1\314\63\0\1\315\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\3\1\11\11\7\1\2\0"+
    "\10\1\1\0\5\1\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\7\1\1\11\5\1"+
    "\1\11\1\1\2\0\3\1\1\0\4\1\1\11\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\0\4\1"+
    "\2\0\1\1\1\0\3\1\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\1\11\4\1\1\0\1\1\2\0\2\1"+
    "\2\0\1\1\1\0\3\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\4\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\2\11\2\1\1\11\2\1\1\0\1\1\2\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
            return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
            return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexEx1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(constantes.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yycolumn ++;
            } 
            // fall through
          case 53: break;
          case 2: 
            { yycolumn += yylength();  
/* ignora se debe agregar una forma de recoger todos los errores mas adelante. */
    //return new token(constantes.UKN, yytext(), yyline, yycolumn, "ERROR LEXICO");
            } 
            // fall through
          case 54: break;
          case 3: 
            { yycolumn += yylength(); 
    return symbol (constantes.ID, yytext());
    //return new token (constantes.ID, yytext(), yyline + 1, yycolumn - yylength() + 1, "l(l|d)*");
            } 
            // fall through
          case 55: break;
          case 4: 
            { 
            } 
            // fall through
          case 56: break;
          case 5: 
            { yyline++;      // Incrementar la línea
    yycolumn = 1;  // Reiniciar la columna
    yychar = 1;    // Establecer yychar en 1
            } 
            // fall through
          case 57: break;
          case 6: 
            { yycolumn += yylength();    
    return symbol (constantes.IG, yytext());
    //return new token (constantes.IG, yytext(), yyline + 1, yycolumn - yylength() + 1, "=");
            } 
            // fall through
          case 58: break;
          case 7: 
            { yycolumn += yylength();    
    return symbol (constantes.DP, yytext());
    //return new token (constantes.DP, yytext(), yyline + 1, yycolumn - yylength() + 1, ":");
            } 
            // fall through
          case 59: break;
          case 8: 
            { yycolumn += yylength();    
    return symbol (constantes.PYC, yytext());
    //return new token (constantes.PYC, yytext(), yyline + 1, yycolumn - yylength() + 1, ";");
            } 
            // fall through
          case 60: break;
          case 9: 
            { yycolumn += yylength();    
    return symbol (constantes.PA, yytext());
    //return new token (constantes.PA, yytext(), yyline + 1, yycolumn - yylength() + 1, "(");
            } 
            // fall through
          case 61: break;
          case 10: 
            { yycolumn += yylength();    
    return symbol (constantes.PC, yytext());
    //return new token (constantes.PC, yytext(), yyline + 1, yycolumn - yylength() + 1, ")");
            } 
            // fall through
          case 62: break;
          case 11: 
            { yycolumn += yylength();    
    return symbol (constantes.COMA, yytext());
    //return new token (constantes.COMA, yytext(), yyline + 1, yycolumn - yylength() + 1, ",");
            } 
            // fall through
          case 63: break;
          case 12: 
            { yycolumn += yylength();    
    return symbol (constantes.ARROBA, yytext());
    //return new token (constantes.ARROBA, yytext(), yyline + 1, yycolumn - yylength() + 1, "@");
            } 
            // fall through
          case 64: break;
          case 13: 
            { yycolumn += yylength();    
    return symbol (constantes.CA, yytext());
    //return new token (constantes.CA, yytext(), yyline + 1, yycolumn - yylength() + 1, "[");
            } 
            // fall through
          case 65: break;
          case 14: 
            { yycolumn += yylength();    
    return symbol (constantes.CC, yytext());
    //return new token (constantes.CC, yytext(), yyline + 1, yycolumn - yylength() + 1, "]");
            } 
            // fall through
          case 66: break;
          case 15: 
            { yycolumn += yylength();   
    return symbol (constantes.ASIG, yytext());
    //return new token (constantes.ASIG, yytext(), yyline + 1, yycolumn - yylength() + 1, "<-");
            } 
            // fall through
          case 67: break;
          case 16: 
            { yycolumn += yylength();   
    return symbol(constantes.STR, yytext());
    //return new token(constantes.STR, yytext(), yyline + 1, yycolumn - yylength() + 1, "STR");
            } 
            // fall through
          case 68: break;
          case 17: 
            { yycolumn += yylength();   
    return symbol (constantes.POINTER, yytext());
    //return new token (constantes.POINTER, yytext(), yyline + 1, yycolumn - yylength() + 1, "->");
            } 
            // fall through
          case 69: break;
          case 18: 
            { yycolumn += yylength();    
    return symbol (constantes.DOUBLE, yytext());
    //return new token (constantes.DOUBLE, yytext(), yyline + 1, yycolumn - yylength() + 1, "dd*");
            } 
            // fall through
          case 70: break;
          case 19: 
            { yycolumn += yylength();    
    return symbol (constantes.RES, yytext());
    //return new token (constantes.RES, yytext(), yyline + 1, yycolumn - yylength() + 1, "resta");
            } 
            // fall through
          case 71: break;
          case 20: 
            { yycolumn += yylength();    
    return symbol (constantes.ARR, yytext());
    //return new token (constantes.ARR, yytext(), yyline + 1, yycolumn - yylength() + 1, "arr");
            } 
            // fall through
          case 72: break;
          case 21: 
            { yycolumn += yylength();    
    return symbol (constantes.MOD, yytext());
    //return new token (constantes.MOD, yytext(), yyline + 1, yycolumn - yylength() + 1, "modulo");
            } 
            // fall through
          case 73: break;
          case 22: 
            { yycolumn += yylength();    
    return symbol (constantes.MAX, yytext());
    //return new token (constantes.MAX, yytext(), yyline + 1, yycolumn - yylength() + 1, "maximo");
            } 
            // fall through
          case 74: break;
          case 23: 
            { yycolumn += yylength();    
    return symbol (constantes.MULTI, yytext());
    //return new token (constantes.MULTI, yytext(), yyline + 1, yycolumn - yylength() + 1, "multiplicacion");
            } 
            // fall through
          case 75: break;
          case 24: 
            { yycolumn += yylength();    
    return symbol (constantes.MIN, yytext());
    //return new token (constantes.MIN, yytext(), yyline + 1, yycolumn - yylength() + 1, "minimi");
            } 
            // fall through
          case 76: break;
          case 25: 
            { yycolumn += yylength();    
    return symbol (constantes.END, yytext());
    //return new token (constantes.END, yytext(), yyline + 1, yycolumn - yylength() + 1, "end");
            } 
            // fall through
          case 77: break;
          case 26: 
            { yycolumn += yylength();    
    return symbol (constantes.DIV, yytext());
    //return new token (constantes.DIV, yytext(), yyline + 1, yycolumn - yylength() + 1, "divicion");
            } 
            // fall through
          case 78: break;
          case 27: 
            { yycolumn += yylength();    
    return symbol (constantes.VAR, yytext());
    //return new token (constantes.VAR, yytext(), yyline + 1, yycolumn - yylength() + 1, "var");
            } 
            // fall through
          case 79: break;
          case 28: 
            { yycolumn += yylength();    
    return symbol (constantes.SUM, yytext());
    //return new token (constantes.SUM, yytext(), yyline + 1, yycolumn - yylength() + 1, "suma");
            } 
            // fall through
          case 80: break;
          case 29: 
            { yycolumn += yylength();    
    return symbol (constantes.MODA, yytext());
    //return new token (constantes.MODA, yytext(), yyline + 1, yycolumn - yylength() + 1, "moda");
            } 
            // fall through
          case 81: break;
          case 30: 
            { yycolumn += yylength();    
    return symbol (constantes.EXEC, yytext());
    //return new token (constantes.EXEC, yytext(), yyline + 1, yycolumn - yylength() + 1, "exec");
            } 
            // fall through
          case 82: break;
          case 31: 
            { yycolumn += yylength();    
    return symbol (constantes.EJEX, yytext());
    //return new token (constantes.EJEX, yytext(), yyline + 1, yycolumn - yylength() + 1, "ejeX");
            } 
            // fall through
          case 83: break;
          case 32: 
            { yycolumn += yylength();    
    return symbol (constantes.EJEY, yytext());
    //return new token (constantes.EJEY, yytext(), yyline + 1, yycolumn - yylength() + 1, "ejeY");
            } 
            // fall through
          case 84: break;
          case 33: 
            { for (int i = 0; i < yytext().length(); i++) {
            if (yytext().charAt(i) == '\n') {
                yyline++;
            }
        }
            } 
            // fall through
          case 85: break;
          case 34: 
            { yycolumn += yylength();    
    return symbol (constantes.PRINT, yytext());
    //return new token (constantes.PRINT, yytext(), yyline + 1, yycolumn - yylength() + 1, "print");
            } 
            // fall through
          case 86: break;
          case 35: 
            { yycolumn += yylength();    
    return symbol (constantes.MEDIA, yytext());
    //return new token (constantes.MEDIA, yytext(), yyline + 1, yycolumn - yylength() + 1, "media");
            } 
            // fall through
          case 87: break;
          case 36: 
            { yycolumn += yylength();    
    return symbol (constantes.LABEL, yytext());
    //return new token (constantes.LABEL, yytext(), yyline + 1, yycolumn - yylength() + 1, "label");
            } 
            // fall through
          case 88: break;
          case 37: 
            { yycolumn += yylength();    
    return symbol (constantes.DOUBLE, yytext());
    //return new token (constantes.DOUBLE, yytext(), yyline + 1, yycolumn - yylength() + 1, "double");
            } 
            // fall through
          case 89: break;
          case 38: 
            { yycolumn += yylength();    
    return symbol (constantes.COLUMN, yytext());
    //return new token (constantes.COLUMN, yytext(), yyline + 1, yycolumn - yylength() + 1, "column");
            } 
            // fall through
          case 90: break;
          case 39: 
            { yycolumn += yylength();    
    return symbol (constantes.CHAR, yytext());
    //return new token (constantes.CHAR, yytext(), yyline + 1, yycolumn - yylength() + 1, "char");
            } 
            // fall through
          case 91: break;
          case 40: 
            { yycolumn += yylength();    
    return symbol (constantes.VALUES, yytext());
    //return new token (constantes.VALUES, yytext(), yyline + 1, yycolumn - yylength() + 1, "values");
            } 
            // fall through
          case 92: break;
          case 41: 
            { yycolumn += yylength();    
    return symbol (constantes.TITULO, yytext());
    //return new token (constantes.TITULO, yytext(), yyline + 1, yycolumn - yylength() + 1, "titulo");
            } 
            // fall through
          case 93: break;
          case 42: 
            { yycolumn += yylength();   
    return symbol (constantes.STAPR, yytext());
    //return new token (constantes.STAPR, yytext(), yyline + 1, yycolumn - yylength() + 1, "START PROGRAM");
            } 
            // fall through
          case 94: break;
          case 43: 
            { yycolumn += yylength();    
    return symbol (constantes.MEDIANA, yytext());
    //return new token (constantes.MEDIANA, yytext(), yyline + 1, yycolumn - yylength() + 1, "mediana");
            } 
            // fall through
          case 95: break;
          case 44: 
            { yycolumn += yylength();    
    return symbol (constantes.CONSOLE, yytext());
    //return new token (constantes.CONSOLE, yytext(), yyline + 1, yycolumn - yylength() + 1, "console");
            } 
            // fall through
          case 96: break;
          case 45: 
            { yycolumn += yylength();    
    return symbol (constantes.TITULOX, yytext());
    //return new token (constantes.TITULOX, yytext(), yyline + 1, yycolumn - yylength() + 1, "tituloX");
            } 
            // fall through
          case 97: break;
          case 46: 
            { yycolumn += yylength();    
    return symbol (constantes.TITULOY, yytext());
    //return new token (constantes.TITULOY, yytext(), yyline + 1, yycolumn - yylength() + 1, "tituloY");
            } 
            // fall through
          case 98: break;
          case 47: 
            { yycolumn += yylength();    
    return symbol (constantes.GRAPHPIE, yytext());
    //return new token (constantes.GRAPHPIE, yytext(), yyline + 1, yycolumn - yylength() + 1, "graphPie");
            } 
            // fall through
          case 99: break;
          case 48: 
            { yycolumn += yylength();    
    return symbol (constantes.GRAPHBAR, yytext());
    //return new token (constantes.GRAPHBAR, yytext(), yyline + 1, yycolumn - yylength() + 1, "graphBar");
            } 
            // fall through
          case 100: break;
          case 49: 
            { yycolumn += yylength();    
    return symbol (constantes.VARIANZA, yytext());
    //return new token (constantes.VARIANZA, yytext(), yyline + 1, yycolumn - yylength() + 1, "varianza");
            } 
            // fall through
          case 101: break;
          case 50: 
            { yycolumn += yylength();    
    return symbol (constantes.GRAPHLINE, yytext());
    //return new token (constantes.GRAPHLINE, yytext(), yyline + 1, yycolumn - yylength() + 1, "graphLine");
            } 
            // fall through
          case 102: break;
          case 51: 
            { yycolumn += yylength();    
    return symbol (constantes.HISTOGRAM, yytext());
    //return new token (constantes.HISTOGRAM, yytext(), yyline + 1, yycolumn - yylength() + 1, "Histogram");
            } 
            // fall through
          case 103: break;
          case 52: 
            { yycolumn += yylength();  
    return symbol (constantes.ENDPR, yytext());
    //return new token (constantes.ENDPR, yytext(), yyline + 1, yycolumn - yylength() + 1, "END PROGRAM");
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
